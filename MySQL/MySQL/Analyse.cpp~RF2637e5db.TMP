#include"Analyse.h"

void Analyse::split(const string& order, vector<string>& v, const string& separator)//separate a line using separator and store in v
{
	string::size_type pos_sub_begin; // 子串开始位置  
	string::size_type pos_sep;//分隔符位置  
	pos_sep = order.find(separator);
	pos_sub_begin = 0;
	while (string::npos != pos_sep)
	{
		v.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
		pos_sub_begin = pos_sep + separator.size();
		pos_sep = order.find(separator, pos_sub_begin);
	}
	if (pos_sub_begin != order.length())// 截取最后一段数据     
		v.push_back(order.substr(pos_sub_begin));
}

void Analyse::split_all(const string& order, vector<string>& v,const string& separator)
{
	string::size_type pos_sub_begin; // 子串开始位置  
	string::size_type pos_sep;//分隔符位置  
	string::size_type pos_end;
	if (order.find("(") == string::npos || order.find(")") == string::npos)
	{
		pos_sep = order.find(separator);
		pos_sub_begin = 0;
		while (string::npos != pos_sep)
		{
			v.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
			pos_sub_begin = pos_sep + separator.size();
			pos_sep = order.find(separator, pos_sub_begin);
		}
		if (pos_sub_begin != order.length())// 截取最后一段数据     
			v.push_back(order.substr(pos_sub_begin));
	}
	else
	{
		pos_sep = order.find(separator);
		pos_sub_begin = 0;
		pos_end = order.find("(");
		while (string::npos != pos_sep && pos_sep < pos_end)
		{
			v.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
			pos_sub_begin = pos_sep + separator.size();
			pos_sep = order.find(separator, pos_sub_begin);
		}
		if (order[order.length() - 1] != ')')
		{
			pos_sub_begin = order.find(")") + 2;
			pos_sep = order.find(separator, pos_sub_begin);
			while (string::npos != pos_sep)
			{
				v.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
				pos_sub_begin = pos_sep + separator.size();
				pos_sep = order.find(separator, pos_sub_begin);
			}
			if (pos_sub_begin != order.length())// 截取最后一段数据     
				v.push_back(order.substr(pos_sub_begin));
		}
		
	}
}

void Analyse::split_col(const string& order, vector<string>& v, const string& separator)
{
	string::size_type pos_sub_begin; // 子串开始位置  
	string::size_type pos_sep;//分隔符位置  
	string::size_type pos_end;
	pos_sep= order.find(", ");   
	pos_sub_begin= order.find("(")+1;  
	pos_end = order.find(")");
	while (string::npos != pos_sep)    
	{      
		v.push_back(order.substr(pos_sub_begin, pos_sep- pos_sub_begin));
		pos_sub_begin = pos_sep + separator.size();
		pos_sep = order.find(separator, pos_sub_begin);
	}    
	if (pos_sub_begin != pos_end )// 截取最后一段数据     
		v.push_back(order.substr(pos_sub_begin, pos_end - pos_sub_begin));
}

void Analyse::split_insert_distinct(const string& order, vector<string>&v, const string& separator)
{
	string::size_type pos_sub_begin; // 子串开始位置  
	string::size_type pos_sep;//分隔符位置  
	string::size_type pos_end;
	pos_sep = order.find(separator);
	pos_sub_begin = 0;
	pos_end = order.find("(");
	for (int i = 0; i < 2; i++)
	{
		while (string::npos != pos_sep && pos_sep < pos_end)
		{
			//if((order.substr(pos_sub_begin, pos_sep - pos_sub_begin)!=" "))
				v.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
			pos_sub_begin = pos_sep + separator.size();
			pos_sep = order.find(separator, pos_sub_begin);
		}
		pos_sub_begin = order.find(")")+2;
		pos_end = order.find("(", pos_sub_begin);
		pos_sep = order.find(separator, pos_sub_begin);
	}
}

void Analyse::split_insert_distinct_col(const string& order, vector<string>&v,vector<string>&val, const string& separator)
{
	string::size_type pos_sub_begin; // 子串开始位置  
	string::size_type pos_sep;//分隔符位置  
	string::size_type pos_end;
	pos_sep = order.find(separator);
	pos_sub_begin = order.find("(") + 1;
	pos_end = order.find(")");
	while (string::npos != pos_sep && pos_sep < order.find("(", order.find(")")))
	{
		v.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
		pos_sub_begin = pos_sep + separator.size();
		pos_sep = order.find(separator, pos_sub_begin);
	}
	if (pos_sub_begin < pos_end)// 截取最后一段数据     
		v.push_back(order.substr(pos_sub_begin, pos_end - pos_sub_begin));
	
	pos_sub_begin = order.find("(", order.find(")")) + 1;
	pos_end = order.find(")", pos_sub_begin);
	pos_sep = order.find(separator, pos_sub_begin);

	while (string::npos != pos_sep)
	{
		val.push_back(order.substr(pos_sub_begin, pos_sep - pos_sub_begin));
		pos_sub_begin = pos_sep + separator.size();
		pos_sep = order.find(separator, pos_sub_begin);
	}
	if (pos_sub_begin < pos_end)// 截取最后一段数据     
		val.push_back(order.substr(pos_sub_begin, pos_end - pos_sub_begin));
}
	
bool Analyse::create(const string& order)
{
	Analyse a;
	vector<string> col;
	if (order.length()>=1)
	{
		a.split_col(order, col, ", ");
		vector<string> word;
		a.split_all(order, word, " ");
		if (word.size() == 5 && word[0] == "CREATE"&&word[1] == "TABLE"&&word[2] != ""&&word[3] == "TO"&&word[4].size() >= 5)
		{
			smatch result;
			regex pattern("(.*)(.{4})");
			if (regex_match(word[4], result, pattern))

				if (result[2] == ".txt")
				{
					return true;
				}
		}
	}
	return false;
}

bool Analyse::create_from_file(const string& order)
{
	Analyse a;
	vector<string> col;
	a.split_col(order, col, ", ");
	vector<string> word;
	a.split_all(order, word, " ");
	if (word.size() == 5 && word[0] == "CREATE"&&word[1] == "TABLE"&&word[2] != ""&&word[3] == "FROM"&&word[4].size() >= 5)
	{
		smatch result;
		regex pattern("(.*)(.{4})");
		if (regex_match(word[4], result, pattern))
		{
			if (result[2] == ".txt")
			{
				return true;
			}
		}
	}
	return false;
}

bool Analyse::table_list(const string&order)
{
	Analyse a;
	vector<string> word;
	a.split_all(order, word, " ");
	if (word.size() == 2 && word[0] == "TABLE"&&word[1] == "LIST")
	{
		return true;
	}
	return false;
}

bool Analyse::drop(const string&order)
{
	Analyse a;
	vector<string> word;
	a.split_all(order, word, " ");
	if (word.size() == 3 && word[0] == "DROP"&&word[1] == "TABLE"&&word[2] != "")
	{
		return true;
	}
	return false;
}

bool Analyse::insert_row(const string& order)
{
	Analyse a;
	vector<string> col;
	a.split_col(order, col, ", ");
	vector<string> word;
	a.split_all(order, word, " ");
	if (word.size() == 4 && word[0] == "INSERT"&&word[1] == "INTO"&&word[2] != ""&&word[3] == "VALUES")
	{
		return true;
	}
	return false;
}

bool Analyse::insert_distinct(const string& order)
{
	Analyse a;
	vector<string> col;
	vector<string>value;
	a.split_insert_distinct_col(order, col,value, ", ");
	vector<string> word;
	a.split_insert_distinct(order, word, " ");
	if (col.size()==value.size()&&word.size() == 4 && word[0] == "INSERT"&&word[1] == "INTO"&&word[2] != ""&&word[3] == "VALUES")
	{
		return true;
	}
	return false;
}

bool Analyse::delete_row(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() == 7 && word[0] == "DELETE"&&word[1] == "FROM"&&word[2] != ""&&word[3] == "WHERE"&&word[4]!=""&&word[5]=="="&&word[6]!="")
	{
		return true;
	}
	return false;
}

bool Analyse::delete_all(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() == 4 && word[0] == "DELETE"&&word[1] == "*"&&word[2] == "FROM"&&word[3] !="")
	{
		return true;
	}
	return false;
}

bool Analyse::select(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() < 4)
		return false;
	for (int i = 1; i < word.size() - 2; i++)
	{
		word[i] = word[i].substr(0, word[i].length() - 1);
	}
	if (word[0] == "SELECT"&&word[1]!="DISTINC"&&word[word.size()-2] == "FROM"&&word[word.size()-1] != ""&&word[word.size()-1]!="ASC"&& word[word.size() - 1] != "DESC"&& word[word.size() - 2] != "=")
	{
		return true;
	}
	return false;
}

bool Analyse::select_all(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() == 4 && word[0] == "SELECT"&&word[1] == "*"&&word[2] == "FROM"&&word[3] != "")
	{
		return true;
	}
	return false;
}

bool Analyse::select_distinct(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() < 5)
		return false;
	for (int i = 2; i < word.size() - 2; i++)
	{
		word[i] = word[i].substr(0, word[i].length() - 1);
	}
	if (word[0] == "SELECT"&&word[1]=="DISTINCT"&&word[word.size() - 2] == "FROM"&&word[word.size() - 1] != "" && word[word.size() - 1] != "ASC" && word[word.size() - 1] != "DESC")
	{
		return true;
	}
	return false;
}

bool Analyse::select_sort(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() < 8)
		return false;
	for (int i = 6; i < word.size() - 2; i++)
	{
		word[i] = word[i].substr(0, word[i].length() - 1);
	}
	for (int i = 0; i < word.size(); i++)
	{
		cout << word[i] << endl;
	}
	if (word[0] == "SELECT"&&word[1] == "*"&&word[2]=="FROM"&&word[3] != ""&&word[4] == "ORDER"&&word[5] == "BY"&&(word[word.size() - 1] == "ASC"||word[word.size() - 1] == "DESC"))
	{
		return true;
	}
	return false;
}

bool Analyse::select_some(const string& order)
{
	Analyse a;
	vector<string> word;
	a.split(order, word, " ");
	if (word.size() < 8)
		return false;
	for (int i = 1; i < word.size() - 7; i++)
	{
		word[i] = word[i].substr(0, word[i].length() - 1);
	}
	for (int i = 0; i < word.size(); i++)
	{
		cout << word[i] << endl;
	}
	if (word[0] == "SELECT"&&word[1]!=""&& word[word.size() - 6] == "FROM"&& word[word.size() - 5] != ""&& word[word.size() - 4] == "WHERE"&& word[word.size() - 3] != "" && word[word.size() - 2] == "=" && word[word.size() - 1] != "")
	{
		return true;
	}
	return false;
}